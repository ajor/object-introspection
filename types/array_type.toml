[info]
typeName = "std::array<"
ctype = "ARRAY_TYPE"
header = "array"
ns = ["namespace std"]

## TODO keep but don't measure the value param (param idx 1)
# Old:
numTemplateParams = 1

[codegen]
decl = """
template<typename T, long unsigned int N>
void getSizeType(const %1%<T, N> &container, size_t& returnArg);
"""

func = """
template<typename T, long unsigned int N>
void getSizeType(const %1%<T,N> &container, size_t& returnArg)
{
    SAVE_DATA((uintptr_t)container.size());
    SAVE_SIZE(sizeof(container));

    for (auto & it: container) {
        // undo the static size that has already been added per-element
        SAVE_SIZE(-sizeof(it));
        getSizeType(it, returnArg);
    }
}
"""
