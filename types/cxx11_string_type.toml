[info]
typeName = "std::__cxx11::basic_string<"
stub_template_params = [1,2] # TODO tests
ctype = "STRING_TYPE"
header = "string"
ns = ["namespace std"]

# Old:
numTemplateParams = 1
replaceTemplateParamIndex = []

[codegen]
decl = """
template<typename T>
void getSizeType(const %1%<T> &t, size_t& returnArg);
"""

func = """
template<typename T>
void getSizeType(const %1%<T> &t, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<T>));

    SAVE_DATA((uintptr_t)t.capacity());
    SAVE_DATA((uintptr_t)t.size());

    // Test for small string optimisation - whether the underlying string is
    // contained within the string object.
    SAVE_SIZE(
      (((uintptr_t)t.data() < (uintptr_t)(&t + sizeof(%1%<T>)))
        &&
      ((uintptr_t)t.data() >= (uintptr_t)&t))
        ? 0 : (t.capacity() * sizeof(T))
    );
}
"""
